------------------------------------------------------------------------------------------------------------------------
Language Specification: https://262.ecma-international.org/6.0/
MDN:                    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/
Other:                  https://javascript.info
------------------------------------------------------------------------------------------------------------------------





------------------------------------------------------------------------------------------------------------------------
https://javascript.info/global-object
------------------------------------------------------------------------------------------------------------------------
    - The global object holds variables that should be available everywhere.

    - That includes JavaScript built-ins, such as Array and environment-specific values, such as window.innerHeight –
            the window height in the browser.

    - The global object has a universal name:
            - globalThis.
        …But more often is referred by “old-school” environment-specific names, such as:
            - window (browser) and
            - global (Node.js).

    - We should store values in the global object only if they’re truly global for our project. And keep their
        number at minimum.

    - In-browser, unless we’re using modules, global functions and variables declared with var become a property
        of the global object.

    - To make our code future-proof and easier to understand, we should access properties of the global object
        directly, as window.x.






------------------------------------------------------------------------------------------------------------------------
use 'strict'
------------------------------------------------------------------------------------------------------------------------
http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/
=> it helps you make fewer errors, by detecting more things that could lead to breakages.

Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a "strict" operating
context. This strict context prevents certain actions from being taken and throws more exceptions.

Strict mode helps out in a couple ways:

It catches some common coding bloopers, throwing exceptions.
It prevents, or throws errors, when relatively "unsafe" actions are taken (such as gaining access to the global object).
It disables features that are confusing or poorly thought out.

